#!/usr/bin/env groovy
//
// The main Jenkinsfile for FIBO html-pages
//
// Note that this file is in the so called "Declarative Pipeline" syntax
//
// See https://jenkins.io/doc/book/pipeline/jenkinsfile/
//
//
// Jenkins requirements:
//	* "pipeline-npm" plugin + "fibo" Npm config file

import groovy.json.JsonSlurper

env.ONTPUB_FAMILY='fibo'
env.ONTPUB_SPEC_HOST='spec.edmcouncil.org'
env.ONTPUB_IS_DARK_MODE='1'
env.LC_ALL='en_US.UTF-8'
env.LANG='en_US.UTF-8'
env.LANGUAGE='en_US.UTF-8'
env.NGINX_SPEC_ROOT='/opt/html-pages-dev/fibo'

properties([
  buildDiscarder(
          logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '30')
  ),
  //
  // We let each stage running on each jenkins slave / agent decide what to check out or not
  //
//  skipDefaultCheckout(),
  //
  // Skip stages once the build status has gone to UNSTABLE.
  //
//  skipStagesAfterUnstable(),
  //
  // There must be SOME limit, if it hangs or whatever then that's a bug and therefore cancel the job.
  //
//  timeout(time: 23, unit: 'HOURS'),
  //
  // Prepend all console output generated by the Pipeline run with the time at which the line was emitted
  //
  //timestamps()
//  ansiColor('xterm')
])

node {
  ansiColor('xterm') {
    stage('Build') {
      node('master') {
        try {
          echo "Branch is ${env.BRANCH_NAME}..."
          checkout scm
          dir('fibo') {
            withNPM(npmrcConfig:'fibo') {
              sh "set &>${env.BUILD_TAG}.log"
              echo "Performing npm install..."
              sh "npm --no-progress --no-color install &>>${env.BUILD_TAG}.log"
              echo "Performing npm build..."
              sh "npm --no-progress --no-color run build &>>${env.BUILD_TAG}.log"
              sh "mv -vf ${env.BUILD_TAG}.log dist/"
              echo 'Stashing dist/**'
              dir('dist') {
                stash name: "fibo", includes: "htmlpages/**,*.log"
              }
            }
          }
        } catch (e) {
          currentBuild.result = "FAILURE"
          echo "Failed the \"${STAGE_NAME}\" stage: ${e}"
          throw e
        } finally {
          deleteDir()
          dir("${workspace}@tmp") {
            deleteDir()
          }
          // slackScript.notifyStage()
        }
      } // end of node('master')
    } // end of stage "Publish"
    stage('Publish') {
      node('master') {
        try {
          dir("${NGINX_SPEC_ROOT}") {
            echo 'Unstashing the output of the publish stage'
            unstash 'fibo'
            archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
          }
        } catch (e) {
          currentBuild.result = "FAILURE"
          echo "Failed the \"${STAGE_NAME}\" stage: ${e}"
          throw e
        } finally {
          deleteDir()
          dir("${workspace}@tmp") {
            deleteDir()
          }
          script {
            BRANCH = sh(returnStdout: true, script: 'if [ -n "${TAG_NAME}" ] ; then echo "${TAG_NAME}" | cut -d_ -f 1 ; else echo "${BRANCH_NAME}" ; fi').trim().toLowerCase()
            TAG    = sh(returnStdout: true, script: 'if [ -n "${TAG_NAME}" ] ; then echo "${TAG_NAME}" | cut -d_ -f 2 ; else echo "latest" ; fi').trim()
          }
          withCredentials([string(credentialsId: "apiKey_${env.ONTPUB_SPEC_HOST}_${env.ONTPUB_FAMILY}_ontology", variable: 'API_KEY')]) {
            def ontologyUpdate = """
                {"apiKey": "${API_KEY}"}
            """
            def response = httpRequest acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', httpMode: 'POST', requestBody: ontologyUpdate, url: "https://${env.ONTPUB_SPEC_HOST}/${env.ONTPUB_FAMILY}/ontology/${BRANCH}/${TAG}"
            def json = new JsonSlurper().parseText(response.content)
            echo "Start \"https://${env.ONTPUB_SPEC_HOST}/${env.ONTPUB_FAMILY}/ontology/${BRANCH}/${TAG}\" update (${response.status}):\n id:\t\t${json.id}\n status:\t\t${json.status}\n msg:\t${json.msg}\n startTimestamp:\t${json.startTimestamp}"
          }
          // slackScript.notifyStage()
        }
      } // end of node('master')
    } // end of stage "Publish"
  } // end of ansiColor('xterm')
}
